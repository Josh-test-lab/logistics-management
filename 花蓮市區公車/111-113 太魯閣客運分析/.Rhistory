path = paste0("images/", year - 1911, "/", bus, "/line chart")
check_path(path)
img_filename = paste0(year - 1 - 1911, '、', year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線平假日日均次數消長情形')
png(filename = paste0(path, "/", img_filename, ".png"), width = 15, height = 5, units = "in", res = 300, family = "kai")
weekday_and_weekend_gorw_up_plot(bus, year, month.from, month.to)
dev.off()
}
}
}
# 繪圖
generate_weekday_and_weekend_gorw_up_plot(buses, year.from, year.to, 1, 12)  # 全年
generate_weekday_and_weekend_gorw_up_plot(buses, year.from, year.to, 1, 6)   # 上半年
generate_weekday_and_weekend_gorw_up_plot(buses, year.from, year.to, 7, 12)  # 下半年
# 路線搭車票種長條圖
tick_type_histgram <- function(bus, year, month.from, month.to) {
months = generate_months(year, year, month.from, month.to)
df_ticket = data.frame()
for(month_index in months){
df_ticket = rbind(df_ticket, df[[month_index]][[bus]])
}
df_ticket <- convert_holder_type(df_ticket$HolderType) %>% table()
color <- gray.colors(length(df_ticket))
par(family = "kai", mar = c(5, 6, 4, 3))  # 字體與圖寬
bp <- barplot(height = df_ticket,
col = color,
xlab = "票種",
ylab = "數量",
las = 1,
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
yaxt = "n",
main = "",
ylim = c(0, max(df_ticket) * 1.1)
)
title(main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線搭車票種'), cex.main = 2, adj = 0)
# x 軸
#axis(side = 1, at = 1:length(df_ticket), labels = c(names(df_ticket)), cex.axis = 1.5)
# y 軸
axis(side = 2, las = 1, cex.axis = 1.5, line = -1.5)
# 百分比
labels <- paste0(round(df_ticket * 100 / sum(df_ticket)), "%")
text(x = bp,
y = df_ticket,
labels = labels,
pos = 3,
cex = 1.5)
}
generate_tick_type_histgram <- function(buses, year.from, year.to, month.from, month.to) {
for(bus in buses){
for (year in year.from:year.to){
# 繪圖 (在 R中呈現)
tick_type_histgram(bus, year, month.from, month.to)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/barplot")
check_path(path)
img_filename = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線搭車票種')
png(filename = paste0(path, "/", img_filename, ".png"), width = 13.79, height = 8.25, units = "in", res = 300, family = "kai")
tick_type_histgram(bus, year, month.from, month.to)
dev.off()
}
}
}
# 繪圖
generate_tick_type_histgram(buses, year.from, year.to, 1, 12)  # 全年
generate_tick_type_histgram(buses, year.from, year.to, 1, 6)   # 上半年
generate_tick_type_histgram(buses, year.from, year.to, 7, 12)  # 下半年
# 路線搭車票種長條圖 (去程，direction = 0; 回程，direction = 1)
tick_type_direction_histgram <- function(bus, year, month.from, month.to, direction) {
months = generate_months(year, year, month.from, month.to)
df_ticket = data.frame()
for(month_index in months){
df_ticket = rbind(df_ticket, df[[month_index]][[bus]][ df[[month_index]][[bus]][["Direction"]] == direction, ])
}
df_ticket <- convert_holder_type(df_ticket$HolderType) %>% table()
color <- gray.colors(length(df_ticket))
par(family = "kai", mar = c(5, 6, 4, 3))  # 字體與圖寬
bp <- barplot(height = df_ticket,
col = color,
xlab = "票種",
ylab = "數量",
las = 1,
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
yaxt = "n",
main = "",
ylim = c(0, max(df_ticket) * 1.1)
)
title(main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線', ifelse(direction == 0, '去程', '回程'), '搭車票種'), cex.main = 2, adj = 0)
# x 軸
#axis(side = 1, at = 1:length(df_ticket), labels = c(names(df_ticket)), cex.axis = 1.5)
# y 軸
axis(side = 2, las = 1, cex.axis = 1.5, line = -1.5)
# 百分比
labels <- paste0(round(df_ticket * 100 / sum(df_ticket)), "%")
text(x = bp,
y = df_ticket,
labels = labels,
pos = 3,
cex = 1.5)
}
generate_tick_type_direction_histgram <- function(buses, year.from, year.to, month.from, month.to) {
for (direction in 0:1){
for(bus in buses){
for (year in year.from:year.to){
# 繪圖 (在 R中呈現)
tick_type_direction_histgram(bus, year, month.from, month.to, direction)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/barplot")
check_path(path)
img_filename = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線', ifelse(direction == 0, '去程', '回程'), '搭車票種')
png(filename = paste0(path, "/", img_filename, ".png"), width = 13.79, height = 8.25, units = "in", res = 300, family = "kai")
tick_type_direction_histgram(bus, year, month.from, month.to, direction)
dev.off()
}
}
}
}
# 繪圖
generate_tick_type_direction_histgram(buses, year.from, year.to, 1, 12)  # 全年
generate_tick_type_direction_histgram(buses, year.from, year.to, 1, 6)   # 上半年
generate_tick_type_direction_histgram(buses, year.from, year.to, 7, 12)  # 下半年
# 平假日路線各上下車站點票種直方疊圖 (去程，direction = 0; 回程，direction = 1)
tick_type_week_day_direction_histgram <- function(bus, year, month.from, month.to, week_day, direction, boarding) {
months = generate_months(year, year, month.from, month.to)
if (week_day == '平日'){
weekday = c("星期一", "星期二", "星期三", "星期四", "星期五")
} else {
weekday = c("星期六", "星期日")
}
df_ticket <- data.frame()
for (month_index in months) {
df_month <- df[[month_index]][[bus]]
df_month <- df_month[df_month$Direction == direction, ]
df_ticket <- rbind(df_ticket, df_month)
}
df_ticket <- df_ticket[df_ticket$Weekday %in% weekday, ]  # 抓取平假日
if (boarding){
df_ticket <- df_ticket[df_ticket$BoardingStopName != "-99", ]  #移除逃票
table_limit <- max(table(df_ticket$BoardingStopName))
}else {
df_ticket <- df_ticket[df_ticket$DeboardingStopName != "-99", ]  #移除逃票
table_limit <- max(table(df_ticket$DeboardingStopName))
}
df_ticket$HolderType <- convert_holder_type(df_ticket$HolderType)
# 依照站別順序
if (boarding){
df_ticket$BoardingStopSequence <- as.numeric(df_ticket$BoardingStopSequence)
stop_order <- df_ticket[!duplicated(df_ticket$BoardingStopName), c("BoardingStopName", "BoardingStopSequence")]
stop_order <- stop_order[order(stop_order$BoardingStopSequence), ]
}else {
df_ticket$DeboardingStopSequence <- as.numeric(df_ticket$DeboardingStopSequence)
stop_order <- df_ticket[!duplicated(df_ticket$DeboardingStopName), c("DeboardingStopName", "DeboardingStopSequence")]
stop_order <- stop_order[order(stop_order$DeboardingStopSequence), ]
}
# 製作疊圖
if (boarding){
ticket_count <- table(df_ticket$HolderType, df_ticket$BoardingStopName)
ticket_count <- ticket_count[, stop_order$BoardingStopName]
}else {
ticket_count <- table(df_ticket$HolderType, df_ticket$DeboardingStopName)
ticket_count <- ticket_count[, stop_order$DeboardingStopName]
}
color <- gray.colors(nrow(ticket_count))
#color <- rainbow(nrow(ticket_count))
par(family = "kai", mar = c(5, 13, 2, 6))  # 字體與圖寬 c(bottom, left, top, right)
barplot(height = ticket_count,
col = color,
xlab = "票種疊圖",
#ylab = "站別",
las = 1,
horiz = TRUE,
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
#yaxt = "n",
main = "",
xlim = c(0, table_limit * 1.1)
)
title(main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線', ifelse(direction == 0, '去程', '回程'), ifelse(week_day == '平日', '平日', '假日'), '各', ifelse(boarding, '上', '下'), '車站點票種直方疊圖'), cex.main = 2, adj = 0)
# x 軸
#axis(side = 1, at = 1:length(ticket_count), labels = c(names(ticket_count)), cex.axis = 1.5)
# y 軸
#axis(side = 2, las = 1, cex.axis = 1.5, line = -1.5)
# 圖例
legend("topright",
legend = rownames(ticket_count),
fill =  color,
title = "票種",
cex = 1.5
)
}
generate_tick_type_week_day_direction_histgram <- function(buses, year.from, year.to, month.from, month.to) {
for(boarding in c(TRUE, FALSE)){
for (week_day in c('平日', '假日')){
for (direction in 0:1){
for(bus in buses){
for (year in year.from:year.to){
# 繪圖 (在 R中呈現)
tick_type_week_day_direction_histgram(bus, year, month.from, month.to, week_day, direction, boarding)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/barplot")
check_path(path)
img_filename = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線', ifelse(direction == 0, '去程', '回程'), ifelse(week_day == '平日', '平日', '假日'), '各', ifelse(boarding, '上', '下'), '車站點票種直方疊圖')
png(filename = paste0(path, "/", img_filename, ".png"), width = 13.79, height = 8.25, units = "in", res = 300, family = "kai")
tick_type_week_day_direction_histgram(bus, year, month.from, month.to, week_day, direction, boarding)
dev.off()
}
}
}
}
}
}
# 繪圖
generate_tick_type_week_day_direction_histgram(buses, year.from, year.to, 1, 12)  # 全年
generate_tick_type_week_day_direction_histgram(buses, year.from, year.to, 1, 6)   # 上半年
generate_tick_type_week_day_direction_histgram(buses, year.from, year.to, 7, 12)  # 下半年
# 乘坐分鐘票種點圖
boarding_time_direction_plot <- function(bus, year, month.from, month.to, direction) {
months = generate_months(year, year, month.from, month.to)
df_ticket = data.frame()
for(month_index in months){
df_ticket = rbind(df_ticket, df[[month_index]][[bus]][ df[[month_index]][[bus]][["Direction"]] == direction, ])
}
# 將 HolderType 和 TravelTime 是 NA 的資料移除
df_ticket = df_ticket[!is.na(df_ticket$HolderType), ]
df_ticket = df_ticket[!is.na(df_ticket$TravelTime), ]
df_ticket$BoardingStopSequence = as.numeric(df_ticket$BoardingStopSequence)
holder_types <- convert_holder_type(df_ticket$HolderType) %>% unique()
color <- setNames(rainbow(length(holder_types)), holder_types)
df_ticket$Color <- color[convert_holder_type(df_ticket$HolderType)]
par(family = "kai", mar = c(14, 6, 4, 10))  # 字體與圖寬
plot(x = df_ticket$BoardingStopSequence,
y = df_ticket$TravelTime,
col = df_ticket$Color,
xlab = "",
ylab = "乘車分鐘",
pch = 16,
las = 1,
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
xaxt = "n",
#yaxt = "n",
main = "",
bty = "n"
)
title(main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線(', ifelse(direction == 0, '去程', '回程'), ')上車站點-乘坐分鐘票種點圖'), cex.main = 2, adj = 0)
# x 軸
labels_to_use <- if (direction == 0) {
bus_stops[[bus]]
} else {
rev(bus_stops[[bus]])
}
axis(side = 1,
las = 2,
at = 1:length(bus_stops[[bus]]),
labels =  labels_to_use,
cex.axis = 1.2
)
mtext("上車站點", side = 1, line = 12, cex = 2)
# y 軸
#axis(side = 2, las = 1, cex.axis = 1.5, line = -1.5)
# 圖例
legend("topright",
legend = holder_types,
col = color,
lwd = 2,
pch = 16,
bty = "n",
inset = c(-0.15, 0),
xpd = TRUE,
cex = 1.5
)
}
generate_boarding_time_direction_plot <- function(buses, year.from, year.to, month.from, month.to) {
for (direction in 0:1){
for(bus in buses){
for (year in year.from:year.to){
# 繪圖 (在 R中呈現)
boarding_time_direction_plot(bus, year, month.from, month.to, direction)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/scatter plot")
check_path(path)
img_filename = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線(', ifelse(direction == 0, '去程', '回程'), ')上車站點-乘坐分鐘票種點圖')
png(filename = paste0(path, "/", img_filename, ".png"), width = 13.79, height = 8.25, units = "in", res = 300, family = "kai")
boarding_time_direction_plot(bus, year, month.from, month.to, direction)
dev.off()
}
}
}
}
# 繪圖
generate_boarding_time_direction_plot(buses, year.from, year.to, 1, 12)  # 全年
generate_boarding_time_direction_plot(buses, year.from, year.to, 1, 6)   # 上半年
generate_boarding_time_direction_plot(buses, year.from, year.to, 7, 12)  # 下半年
# 乘坐分鐘盒狀圖
travel_time_direction_boxplot <- function(bus, year, month.from, month.to, direction) {
months = generate_months(year, year, month.from, month.to)
df_ticket = data.frame()
for(month_index in months){
df_ticket = rbind(df_ticket, df[[month_index]][[bus]][ df[[month_index]][[bus]][["Direction"]] == direction, ])
}
# 將 HolderType 和 TravelTime 是 NA 的資料移除
df_ticket = df_ticket[!is.na(df_ticket$BoardingStopName), ]
df_ticket = df_ticket[!is.na(df_ticket$TravelTime), ]
# 站點順序
df_ticket$BoardingStopSequence = as.numeric(df_ticket$BoardingStopSequence)
stop_order = df_ticket[!duplicated(df_ticket$BoardingStopName), c("BoardingStopName", "BoardingStopSequence")]
stop_order = stop_order[order(stop_order$BoardingStopSequence), ]
df_ticket$BoardingStopName = factor(df_ticket$BoardingStopName, levels = stop_order$BoardingStopName)
par(family = "kai", mar = c(5, 13, 3, 2))  # 字體與圖寬 c(bottom, left, top, right)
boxplot(split(df_ticket$TravelTime, df_ticket$BoardingStopName),
horizontal = TRUE,
xlab = "乘車分鐘",
#ylab = "站點",
las = 1,
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
main = "",
bty = "n",
names = levels(df_ticket$BoardingStopName),
frame.plot = FALSE
)
title(main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線(', ifelse(direction == 0, '去程', '回程'), ')上車站點-乘坐分鐘盒狀圖'), cex.main = 2, adj = 0)
}
generate_travel_time_direction_boxplot <- function(buses, year.from, year.to, month.from, month.to) {
for (direction in 0:1){
for(bus in buses){
for (year in year.from:year.to){
# 繪圖 (在 R中呈現)
travel_time_direction_boxplot(bus, year, month.from, month.to, direction)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/boxplot")
check_path(path)
img_filename = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線(', ifelse(direction == 0, '去程', '回程'), ')上車站點-乘坐分鐘盒狀圖')
png(filename = paste0(path, "/", img_filename, ".png"), width = 13.79, height = 8.25, units = "in", res = 300, family = "kai")
travel_time_direction_boxplot(bus, year, month.from, month.to, direction)
dev.off()
}
}
}
}
# 繪圖
generate_travel_time_direction_boxplot(buses, year.from, year.to, 1, 12)  # 全年
generate_travel_time_direction_boxplot(buses, year.from, year.to, 1, 6)   # 上半年
generate_travel_time_direction_boxplot(buses, year.from, year.to, 7, 12)  # 下半年
# 個別TPASS運量
tpass_plot <- function(bus, year.to) {
months = c("202310", "202311", "202312", generate_months(2024, year.to, 1, 12))
x_dates <- as.Date(paste0(months, "01"), format = "%Y%m%d")
tpass = NULL
for(month_index in months){
tpass = c(tpass, sum(df_summary[[month_index]][[bus]][['SubTicketType']][[2]])
- as.data.frame(df_summary[[month_index]][[bus]]$SubTicketType)[[2]][is.na(df_summary[[month_index]][[bus]]$SubTicketType$SubTicketType)]
)
}
par(family = "kai", mar = c(5, 6, 4, 10))  # 字體與圖寬
plot(x = x_dates,
y = tpass,
type = "o",
lwd = 2,
pch = 16,
col = "gray",
xlab = "月份",
ylab = "搭乘次數",
ylim = c(min(tpass) * 0.9, max(tpass) * 1.1),
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
xaxt = "n",
yaxt = "n",
bty = "n"
)
months = as.character(as.numeric(months) - 191100)
title(main = paste0('112年10月至', year.to - 1911, '年12月', bus, '路線TPASS搭乘次數折線圖'), cex.main = 2, adj = 0)
# x 軸
axis(side = 1, at = x_dates, labels = months, cex.axis = 1.5)
# y 軸
axis(side = 2, las = 1, cex.axis = 1.5, line = -1.5)
text(x = x_dates,
y = tpass + max(tpass) * 0.02,
labels = tpass,
pos = 3,            # 文字顯示在點上方
cex = 1.5,          # 文字大小
col = "black"
)
grid()  # 網格線
# 圖例
legend("topright",
legend = paste0(bus, '路線'),
col = "gray",
lwd = 2,
pch = 16,
bty = "n",
inset = c(-0.15, 0),
xpd = TRUE,
cex = 1.5
)
}
# 畫到至今為止的圖
for (year in 2024:year.to){
for (bus in buses){
# 繪圖 (在 R中呈現)
tpass_plot(bus, year)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/line chart")
check_path(path)
img_filename = paste0('112年10月至', year.to - 1911, '年12月', bus, '路線TPASS搭乘次數折線圖')
png(filename = paste0(path, "/", img_filename, ".png"), width = 15, height = 5, units = "in", res = 300, family = "kai")
tpass_plot(bus, year)
dev.off()
}
}
# 個別TPASS運量
tpass_total_plot <- function(year.to) {
months = c("202310", "202311", "202312", generate_months(2024, year.to, 1, 12))
x_dates <- as.Date(paste0(months, "01"), format = "%Y%m%d")
tpass_total = data.frame()
for(bus in buses){
tpass = NULL
for(month_index in months){
tpass = c(tpass, sum(df_summary[[month_index]][[bus]][['SubTicketType']][[2]])
- as.data.frame(df_summary[[month_index]][[bus]]$SubTicketType)[[2]][is.na(df_summary[[month_index]][[bus]]$SubTicketType$SubTicketType)]
)
}
tpass_total = rbind(tpass_total, tpass)
}
tpass_total = unname(apply(tpass_total, 2, sum))
par(family = "kai", mar = c(5, 6, 4, 10))  # 字體與圖寬
plot(x = x_dates,
y = tpass_total,
type = "o",
lwd = 2,
pch = 16,
col = "gray",
xlab = "月份",
ylab = "搭乘次數",
ylim = c(min(tpass_total) * 0.9, max(tpass_total) * 1.1),
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
xaxt = "n",
yaxt = "n",
bty = "n"
)
months = as.character(as.numeric(months) - 191100)
title(main = paste0('112年10月至', year.to - 1911, '年12月太魯閣客運TPASS搭乘次數折線圖'), cex.main = 2, adj = 0)
# x 軸
axis(side = 1, at = x_dates, labels = months, cex.axis = 1.5)
# y 軸
axis(side = 2, las = 1, cex.axis = 1.5, line = -1.5)
text(x = x_dates,
y = tpass_total + max(tpass_total) * 0.02,
labels = tpass_total,
pos = 3,            # 文字顯示在點上方
cex = 1.5,          # 文字大小
col = "black"
)
grid()  # 網格線
# 圖例
legend("topright",
legend = "總人次",
col = "gray",
lwd = 2,
pch = 16,
bty = "n",
inset = c(-0.15, 0),
xpd = TRUE,
cex = 1.5
)
}
# 畫到至今為止的圖
for (year in 2024:year.to){
# 繪圖 (在 R中呈現)
tpass_total_plot(year)
# 儲存圖片
path = paste0("images/", year - 1911, "/total/line chart")
check_path(path)
img_filename = paste0('112年10月至', year.to - 1911, '年12月太魯閣客運TPASS搭乘次數折線圖')
png(filename = paste0(path, "/", img_filename, ".png"), width = 15, height = 5, units = "in", res = 300, family = "kai")
tpass_total_plot(year)
dev.off()
}
# tpass for earlist passenger
months = generate_months(2023, year.to, 1, 12)
tpass = data.frame()
for(bus in buses){
tpass_bus = data.frame()
for(month_index in months){
tpass_bus = rbind(tpass_bus, df[[month_index]][[bus]])
}
tpass_bus = tpass_bus[!is.na(tpass_bus$SubTicketType), ]
tpass_bus$BoardingTime = ymd_hms(tpass_bus$BoardingTime)
print(paste0('earlist TPASS for ', bus, ' is: '))
print(tpass_bus[which.min(tpass_bus$BoardingTime), ])
tpass = rbind(tpass, tpass_bus)
}
earliest_row = tpass[which.min(tpass$BoardingTime), ]
print('first TPASS for all roads: ')
print(earliest_row)
end_time = Sys.time()
print(paste0('Cost time: ', end_time - start_time, ' minutes'))
