y = transport_volume_year[[year_index]],
type = "o",
lwd = 2,
pch = 16,
cex = 1.5,
col = color[year_index]
)
}
grid()  # 網格線
# 圖例
legend("topright",
legend = paste0(years, '年'),
col = color,
lwd = 2,
pch = 16,
bty = "n",
inset = c(-0.15, 0),
xpd = TRUE,
cex = 1.5
)
}
# 繪圖 (在 R中呈現)
total_volume_plot(buses, year.from, year.to)
# 儲存圖片
path = paste0("images/from_", year.from - 1911, "_to_", year.to - 1911, "/total/line_chart")
check_path(path)
png(filename = paste0(path, "/total_volume.png"), width = 15, height = 5, units = "in", res = 300, family = "kai")
total_volume_plot(buses, year.from, year.to)
dev.off()
# 太魯閣客運多年總運量
total_volume_plot <- function(buses, year.from, year.to) {
years = year.from:year.to
color <- gray.colors(length(years)+1)
transport_volume_year = list()
for (year in years) {
months = generate_months(year, year, month.from, month.to)
transport_volume = rep(0, length(buses))
for (bus in buses){
transport_each_volume = NULL
for (month_index in months){
transport_each_volume = c(transport_each_volume, nrow(df[[month_index]][[bus]]))
}
transport_volume = transport_volume + transport_each_volume
}
transport_volume_year[[as.character(year)]] = transport_volume  # total
}
par(family = "kai", mar = c(5, 6, 4, 10))  # 字體與圖寬
plot(x = month.from:month.to,
y = transport_volume_year[[1]],
type = "o",
lwd = 2,
pch = 16,
col = color[1],
xlab = "月份",
ylab = "乘車人次",
main = paste0(year.from - 1911, '年', '至', year.to - 1911, '年太魯閣客運總運量'),
ylim = c(min(sapply(transport_volume_year, min)) * 0.9 , max(sapply(transport_volume_year, max)) * 1.1),
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
xaxt = "n",
yaxt = "n",
bty = "n"
)
# x 軸
axis(side = 1, at = month.from:month.to, labels = month.from:month.to, cex.axis = 1.5)
# y 軸
axis(side = 2, las = 1, cex.axis = 1.5, line = -1.5)
for(year_index in 2:(length(years))){
lines(x = month.from:month.to,
y = transport_volume_year[[year_index]],
type = "o",
lwd = 2,
pch = 16,
cex = 1.5,
col = color[year_index]
)
}
grid()  # 網格線
# 圖例
legend("topright",
legend = paste0(years - 1911, '年'),
col = color,
lwd = 2,
pch = 16,
bty = "n",
inset = c(-0.15, 0),
xpd = TRUE,
cex = 1.5
)
}
# 繪圖 (在 R中呈現)
total_volume_plot(buses, year.from, year.to)
# 儲存圖片
path = paste0("images/from_", year.from - 1911, "_to_", year.to - 1911, "/total/line_chart")
check_path(path)
png(filename = paste0(path, "/total_volume.png"), width = 15, height = 5, units = "in", res = 300, family = "kai")
total_volume_plot(buses, year.from, year.to)
dev.off()
df[['202401']][['301']]
df[['202401']][['301']]$BoardingStopUID
df[['202401']][['301']]$BoardingStopName
unique(df[['202401']][['301']]$BoardingStopName)
unique(df[['202401']][['301']]$BoardingStopSequence)
unique(df[['202401']][['301']]$BoardingStopSequence == 1)
df[['202401']][['301']]$BoardingStopSequence == 1
df[['202401']][['301']][df[['202401']][['301']]$BoardingStopSequence == 1, ]
View(df[['202401']][['301']][df[['202401']][['301']]$BoardingStopSequence == 1, ])
View(df[['202401']][['301']]$BoardingStopSequence == 1)
View(df[['202401']][['301']]$BoardingStopSequence)
View(df[['202401']][['301']])
month_index
bus
df[[month_index]][[bus]]
df[[month_index]][[bus]]
df[[month_index]][[bus]][ df[[month_index]][[bus]][["Direction"]] == 0, ]
0:1
# 路線搭車票種長條圖 (去程，driction = 0; 回程，driction = 1)
tick_type_driection_histgram <- function(bus, year, driection) {
months = generate_months(year, year, month.from, month.to)
df_ticket = data.frame()
for(month_index in months){
df_ticket = rbind(df_ticket, df[[month_index]][[bus]][ df[[month_index]][[bus]][["Direction"]] == driection, ])
}
df_ticket <- table(df_ticket$HolderType)
color <- gray.colors(length(df_ticket))
par(family = "kai", mar = c(5, 6, 4, 3))  # 字體與圖寬
bp <- barplot(height = df_ticket,
col = color,
xlab = "票種",
ylab = "數量",
las = 1,
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
yaxt = "n",
main = "",
ylim = c(0, max(df_ticket) * 1.1)
)
title(main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線', ifelse(driection = 0, '去程', '回程'), '搭車票種'), cex.main = 2, adj = 0)
# x 軸
#axis(side = 1, at = 1:length(df_ticket), labels = c(names(df_ticket)), cex.axis = 1.5)
# y 軸
axis(side = 2, las = 1, cex.axis = 1.5, line = -1.5)
# 百分比
labels <- paste0(round(df_ticket * 100 / sum(df_ticket)), "%")
text(x = bp,
y = df_ticket,
labels = labels,
pos = 3,
cex = 1.5)
}
# 全年
month.from = 1
month.to = 12
for (driection in 0:1){
for(bus in buses){
for (year in year.from:year.to){
# 繪圖 (在 R中呈現)
tick_type_driection_histgram(bus, year)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/barplot")
check_path(path)
png(filename = paste0(path, "/路線", ifelse(driection = 0, '去程', '回程'), "搭車票種_all.png"), width = 13.79, height = 8.25, units = "in", res = 300, family = "kai")
tick_type_driection_histgram(bus, year)
dev.off()
}
}
}
# 路線搭車票種長條圖 (去程，driction = 0; 回程，driction = 1)
tick_type_driection_histgram <- function(bus, year, driection) {
months = generate_months(year, year, month.from, month.to)
df_ticket = data.frame()
for(month_index in months){
df_ticket = rbind(df_ticket, df[[month_index]][[bus]][ df[[month_index]][[bus]][["Direction"]] == driection, ])
}
df_ticket <- table(df_ticket$HolderType)
color <- gray.colors(length(df_ticket))
par(family = "kai", mar = c(5, 6, 4, 3))  # 字體與圖寬
bp <- barplot(height = df_ticket,
col = color,
xlab = "票種",
ylab = "數量",
las = 1,
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
yaxt = "n",
main = "",
ylim = c(0, max(df_ticket) * 1.1)
)
title(main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線', ifelse(driection = 0, '去程', '回程'), '搭車票種'), cex.main = 2, adj = 0)
# x 軸
#axis(side = 1, at = 1:length(df_ticket), labels = c(names(df_ticket)), cex.axis = 1.5)
# y 軸
axis(side = 2, las = 1, cex.axis = 1.5, line = -1.5)
# 百分比
labels <- paste0(round(df_ticket * 100 / sum(df_ticket)), "%")
text(x = bp,
y = df_ticket,
labels = labels,
pos = 3,
cex = 1.5)
}
# 全年
month.from = 1
month.to = 12
for (driection in 0:1){
for(bus in buses){
for (year in year.from:year.to){
# 繪圖 (在 R中呈現)
tick_type_driection_histgram(bus, year, driection)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/barplot")
check_path(path)
png(filename = paste0(path, "/路線", ifelse(driection = 0, '去程', '回程'), "搭車票種_all.png"), width = 13.79, height = 8.25, units = "in", res = 300, family = "kai")
tick_type_driection_histgram(bus, year, driection)
dev.off()
}
}
}
# 路線搭車票種長條圖 (去程，driction = 0; 回程，driction = 1)
tick_type_driection_histgram <- function(bus, year, driection) {
months = generate_months(year, year, month.from, month.to)
df_ticket = data.frame()
for(month_index in months){
df_ticket = rbind(df_ticket, df[[month_index]][[bus]][ df[[month_index]][[bus]][["Direction"]] == driection, ])
}
df_ticket <- table(df_ticket$HolderType)
color <- gray.colors(length(df_ticket))
par(family = "kai", mar = c(5, 6, 4, 3))  # 字體與圖寬
bp <- barplot(height = df_ticket,
col = color,
xlab = "票種",
ylab = "數量",
las = 1,
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
yaxt = "n",
main = "",
ylim = c(0, max(df_ticket) * 1.1)
)
title(main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線', ifelse(driection = 0, '去程', '回程'), '搭車票種'), cex.main = 2, adj = 0)
# x 軸
#axis(side = 1, at = 1:length(df_ticket), labels = c(names(df_ticket)), cex.axis = 1.5)
# y 軸
axis(side = 2, las = 1, cex.axis = 1.5, line = -1.5)
# 百分比
labels <- paste0(round(df_ticket * 100 / sum(df_ticket)), "%")
text(x = bp,
y = df_ticket,
labels = labels,
pos = 3,
cex = 1.5)
}
# 全年
month.from = 1
month.to = 12
for (driection in 0:1){
for(bus in buses){
for (year in year.from:year.to){
# 繪圖 (在 R中呈現)
tick_type_driection_histgram(bus, year, driection)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/barplot")
check_path(path)
png(filename = paste0(path, "/路線", ifelse(driection == 0, '去程', '回程'), "搭車票種_all.png"), width = 13.79, height = 8.25, units = "in", res = 300, family = "kai")
tick_type_driection_histgram(bus, year, driection)
dev.off()
}
}
}
# 路線搭車票種長條圖 (去程，driction = 0; 回程，driction = 1)
tick_type_driection_histgram <- function(bus, year, driection) {
months = generate_months(year, year, month.from, month.to)
df_ticket = data.frame()
for(month_index in months){
df_ticket = rbind(df_ticket, df[[month_index]][[bus]][ df[[month_index]][[bus]][["Direction"]] == driection, ])
}
df_ticket <- table(df_ticket$HolderType)
color <- gray.colors(length(df_ticket))
par(family = "kai", mar = c(5, 6, 4, 3))  # 字體與圖寬
bp <- barplot(height = df_ticket,
col = color,
xlab = "票種",
ylab = "數量",
las = 1,
cex.main = 2,
cex.lab = 2,
cex.axis = 1.5,
cex = 1.5,
yaxt = "n",
main = "",
ylim = c(0, max(df_ticket) * 1.1)
)
title(main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線', ifelse(driection == 0, '去程', '回程'), '搭車票種'), cex.main = 2, adj = 0)
# x 軸
#axis(side = 1, at = 1:length(df_ticket), labels = c(names(df_ticket)), cex.axis = 1.5)
# y 軸
axis(side = 2, las = 1, cex.axis = 1.5, line = -1.5)
# 百分比
labels <- paste0(round(df_ticket * 100 / sum(df_ticket)), "%")
text(x = bp,
y = df_ticket,
labels = labels,
pos = 3,
cex = 1.5)
}
# 全年
month.from = 1
month.to = 12
for (driection in 0:1){
for(bus in buses){
for (year in year.from:year.to){
# 繪圖 (在 R中呈現)
tick_type_driection_histgram(bus, year, driection)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/barplot")
check_path(path)
png(filename = paste0(path, "/路線", ifelse(driection == 0, '去程', '回程'), "搭車票種_all.png"), width = 13.79, height = 8.25, units = "in", res = 300, family = "kai")
tick_type_driection_histgram(bus, year, driection)
dev.off()
}
}
}
# 上半
month.from = 1
month.to = 6
for (driection in 0:1){
for(bus in buses){
for (year in year.from:year.to){
# 繪圖 (在 R中呈現)
tick_type_driection_histgram(bus, year, driection)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/barplot")
check_path(path)
png(filename = paste0(path, "/路線", ifelse(driection == 0, '去程', '回程'), "搭車票種_up.png"), width = 13.79, height = 8.25, units = "in", res = 300, family = "kai")
tick_type_driection_histgram(bus, year, driection)
dev.off()
}
}
}
# 下半
month.from = 7
month.to = 12
for (driection in 0:1){
for(bus in buses){
for (year in year.from:year.to){
# 繪圖 (在 R中呈現)
tick_type_driection_histgram(bus, year, driection)
# 儲存圖片
path = paste0("images/", year - 1911, "/", bus, "/barplot")
check_path(path)
png(filename = paste0(path, "/路線", ifelse(driection == 0, '去程', '回程'), "搭車票種_down.png"), width = 13.79, height = 8.25, units = "in", res = 300, family = "kai")
tick_type_driection_histgram(bus, year, driection)
dev.off()
}
}
}
df[[month_index]][[bus]][["BoardingTime"]]
ymd_hms("2024-12-07 14:34:26")
# library
library(xml2)
library(data.table)
library(dplyr)
library(lubridate)
library(tidyr)
library(ggplot2)
ymd_hms("2024-12-07 14:34:26")
1 - NA
df[[month_index]][[bus]]$BoardingStopSequence
df[[month_index]][[bus]]$BoardingStopSequence
# library
library(xml2)
library(data.table)
library(dplyr)
library(lubridate)
library(tidyr)
library(ggplot2)
# function
# load .xml file function
xml_loader <- function(path){
xml_data <- read_xml(path)
return(xml_data)
}
# transform to data frame by RouteName
get_xml_text <- function(node, path) {
result <- xml_find_first(node, path)
if (length(result) == 0 || is.na(result)) return(NA_character_)
xml_text(result, trim = TRUE)
}
xml_to_dataframe <- function(xml_data){
tickets <- xml_find_all(xml_data, ".//BusICTicket")
tickets_str <- vapply(tickets, as.character, character(1))
ticket_data <- rbindlist(lapply(tickets_str, function(ticket_str) {
ticket <- read_xml(ticket_str)
list(
ID = get_xml_text(ticket, "ID"),
IDType = get_xml_text(ticket, "IDType"),
HolderType = get_xml_text(ticket, "HolderType"),
TicketType = get_xml_text(ticket, "TicketType"),
SubTicketType = get_xml_text(ticket, "SubTicketType"),
PlateNumber = get_xml_text(ticket, "PlateNumber"),
RouteUID = get_xml_text(ticket, "RouteUID"),
RouteName = get_xml_text(ticket, "RouteName"),
SubRouteUID = get_xml_text(ticket, "SubRouteUID"),
SubRouteName = get_xml_text(ticket, "SubRouteName"),
Direction = get_xml_text(ticket, "Direction"),
FarePricingType = get_xml_text(ticket, "FarePricingType"),
StopOrStation = get_xml_text(ticket, "StopOrStation"),
BoardingStopUID = get_xml_text(ticket, ".//BoardingStopUID"),
BoardingStopName = get_xml_text(ticket, ".//BoardingStopName"),
BoardingStopSequence = get_xml_text(ticket, ".//BoardingStopSequence"),
BoardingTime = get_xml_text(ticket, ".//BoardingTime"),
DeboardingStopUID = get_xml_text(ticket, ".//DeboardingStopUID"),
DeboardingStopName = get_xml_text(ticket, ".//DeboardingStopName"),
DeboardingStopSequence = get_xml_text(ticket, ".//DeboardingStopSequence"),
DeboardingTime = get_xml_text(ticket, ".//DeboardingTime"),
Price = get_xml_text(ticket, "Price"),
Discount = get_xml_text(ticket, "Discount"),
TransferCode = get_xml_text(ticket, "TransferCode"),
DiscountInfo = get_xml_text(ticket, "DiscountInfo"),
PaymentPrice = get_xml_text(ticket, "PaymentPrice")
)
}), fill = TRUE)
return(ticket_data)
}
# loader
loader <- function(path){
xml_data = data.frame()
for (i in 1:length(path[[1]])){
xml_raw_data = xml_loader(path=path[[1]][i])
xml_data <- rbind(xml_data, xml_to_dataframe(xml_raw_data))
}
data <- xml_data %>%
group_by(RouteName) %>%
group_split() %>%
as.list()
names(data) <- sapply(data, function(df) unique(df$RouteName))  # list name
return(data)
}
# simple summary for every variables
data_summary <- function(df){
df_summary = list()
pb <- txtProgressBar(min = 0, max = length(months), style = 3)
for (month_index in 1:length(months)){
df_summary[[months[month_index]]] <- lapply(df[[month_index]], function(data) {
lapply(names(data), function(col) {
data %>% count(.data[[col]])
}) |> setNames(names(data))
})
names(df_summary[[months[month_index]]]) <- names(df[[month_index]])
setTxtProgressBar(pb, month_index)
}
close(pb)
return(df_summary)
}
# check the amounts of weekends and weekdays
monthly_weekday_and_weekend <- function(year, month){
# build all dates
dates <- seq(ymd(sprintf("%d-%02d-01", year, month)),
ceiling_date(ymd(sprintf("%d-%02d-01", year, month)), "month") - days(1),
by = "day"
)
# is it weekend?
is_weekend <- wday(dates) %in% c(1, 7)  # 1: Sunday, 7: Saturday
# output
result <- table(ifelse(is_weekend, "weekend", "weekday")) %>% data.frame()
return(result)
}
# check the save path
check_path <- function(path) {
if (!dir.exists(path)) {
dir.create(path, recursive = TRUE, showWarnings = FALSE)
}
}
# generate the specified month interval
generate_months <- function(year.from, year.to, month.from = 1, month.to = 12) {
months = unlist(lapply(year.from:year.to, function(y) {sprintf("%04d%02d", y, month.from:month.to)}))
return(months)
}
# config
year.from = 2022  # 西元
year.to = 2024
month.from = 1
month.to = 12
windowsFonts(kai = windowsFont("Microsoft JhengHei"))
# 檔案路徑
base_path <- "../../大數據組需要分析的資料/107-11403-花蓮-太魯閣客運_市區客運"
months <- generate_months(year.from, year.to, month.from, month.to)
roc_years <- as.character(as.integer(substr(months, 1, 4)) - 1911)
paths <- unlist(mapply(function(ym, roc) {
folder <- sprintf("%s_ic_HUA_0412_01", ym)
files <- sprintf("%s_ic_HUA_0412_0%d.xml", ym, 1:3)
file.path(base_path, roc, folder, files)
}, ym = months, roc = roc_years, SIMPLIFY = FALSE))
start_time = Sys.time()
# 將票證資料轉為資料框，以列表呈現
counter = 1
pb <- txtProgressBar(min = 0, max = length(paths), style = 3)
df = list()
for (month_index in seq(1, length(paths), by = 3)){
path = paths[month_index:min(month_index + 2, length(paths))]
df[[months[counter]]] = loader(path)
setTxtProgressBar(pb, counter)
counter = counter + 1
}
