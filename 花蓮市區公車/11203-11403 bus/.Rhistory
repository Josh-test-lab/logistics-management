str(df[[1]])
# variables
names(df[[1]][[1]])
# simple summary for every variables
df_summary = data_summary(df)
#df_summary
# 運量
volume_plot <- function(bus) {
transport_volume = NULL
for (month_index in months){
transport_volume = c(transport_volume, nrow(df[[month_index]][[bus]]))
}
par(family = "kai", mar = c(5, 4, 4, 7))  # 字體與圖寬
plot(x = month.from:month.to,
y = transport_volume,
type = "o",
lwd = 2,
pch = 16,
col = "blue",
xlab = "月份",
ylab = "乘車人次",
main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線乘車人次折線圖'),
ylim = c(min(transport_volume) * 0.9, max(transport_volume) * 1.1)
)
text(x = month.from:month.to,
y = transport_volume + max(transport_volume) * 0.02,
labels = transport_volume,
pos = 3,            # 文字顯示在點上方
cex = 0.8,          # 文字大小
col = "black"
)
grid()  # 網格線
# 圖例
legend("topright",
legend = paste0(bus, '路線'),
col = "blue",
lwd = 2,
pch = 16,
bty = "n",
inset = c(-0.25, 0),
xpd = TRUE
)
}
# 車輛
bus = '301'
# 繪圖 (在 R中呈現)
volume_plot(bus)
# 儲存圖片
path = paste0("images/", bus, "/line_chart")
check_path(path)
png(filename = paste0(path, "/volume.png"), width = 8, height = 5, units = "in", res = 300, family = "kai")
volume_plot(bus)
dev.off()
# TPASS 運量
tpass_volume_plot <- function(bus) {
transport_volume = NULL
tpass = NULL
for (month_index in months){
transport_volume = c(transport_volume, nrow(df[[month_index]][[bus]]))
tpass = c(tpass, df_summary[[month_index]][[bus]][['SubTicketType']][[2]][1] + df_summary[[month_index]][[bus]][['SubTicketType']][[2]][2])
}
par(family = "kai", mar = c(5, 4, 4, 7))  # 字體與圖寬
plot(x = month.from:month.to,
y = transport_volume,
type = "o",
lwd = 2,
pch = 16,
col = "blue",
xlab = "月份",
ylab = "乘車人次",
main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線乘車人次折線圖'),
ylim = c(min(tpass) * 0.9, max(transport_volume) * 1.1)
)
lines(x = month.from:month.to,
y = tpass,
type = "o",
lwd = 2,
pch = 16,
col = "red"
)
lines(x = month.from:month.to,
y = transport_volume - tpass,
type = "o",
lwd = 2,
pch = 16,
col = "darkgreen"
)
grid()  # 網格線
# 圖例
legend("topright",
legend = c("總運量", "TPASS旅客", "其他旅客"),
col = c("blue", "red", "darkgreen"),
lwd = 2,
pch = 16,
bty = "n",
inset = c(-0.25, 0),
xpd = TRUE
)
}
# 車輛
bus = '301'
# 繪圖 (在 R中呈現)
tpass_volume_plot(bus)
# 儲存圖片
path = paste0("images/", bus, "/line_chart")
check_path(path)
png(filename = paste0(path, "/tpass_volume.png"), width = 8, height = 5, units = "in", res = 300, family = "kai")
tpass_volume_plot(bus)
dev.off()
# 整理日期，找出星期幾
buses = names(df[[1]])
for (month_index in months){
for (bus_index in buses){
df[[month_index]][[bus_index]] <- df[[month_index]][[bus_index]] |> mutate(Weekday = weekdays(ymd_hms(BoardingTime)))
}
}
df_summary = data_summary(df)
# 平假日乘車人次
weekend_and_weekday_volume_plot <- function(bus) {
weekend.days = NULL
weekday.days = NULL
month.days = NULL
weekend.volume = NULL
weekday.volume = NULL
month.volume = NULL
for (month_index in month.from:month.to){
week.days = monthly_weekday_and_weekend(year = year, month = month_index)[['Freq']]
weekday.days = c(weekday.days, week.days[1])
weekend.days = c(weekend.days, week.days[2])
month.days = c(month.days, sum(week.days))
week.volume = df_summary[[sprintf("%04d%02d", year, month_index)]][[bus]][['Weekday']]
weekday.volume = c(weekday.volume, sum(week.volume$n[week.volume$Weekday %in% c("星期一", "星期二", "星期三", "星期四", "星期五")]))
weekend.volume = c(weekend.volume, sum(week.volume$n[week.volume$Weekday %in% c("星期六", "星期日")]))
month.volume = c(month.volume, sum(week.volume$n))
}
weekday.volume.per_day = weekday.volume / weekday.days
weekend.volume.per_day = weekend.volume / weekend.days
month.volume.per_day = month.volume / month.days
par(family = "kai", mar = c(5, 4, 4, 7))  # 字體與圖寬
plot(x = month.from:month.to,
y = month.volume.per_day,
type = "o",
lwd = 2,
pch = 16,
col = "blue",
xlab = "月份",
ylab = "日均人次",
main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線日均乘車人次折線圖'),
ylim = c(min(weekday.volume.per_day, weekend.volume.per_day, month.volume.per_day) * 0.9,
max(weekday.volume.per_day, weekend.volume.per_day, month.volume.per_day) * 1.1
)
)
lines(x = month.from:month.to,
y = weekday.volume.per_day,
type = "o",
lwd = 2,
pch = 16,
col = "red"
)
lines(x = month.from:month.to,
y = weekend.volume.per_day,
type = "o",
lwd = 2,
pch = 16,
col = "darkgreen"
)
grid()  # 網格線
# 圖例
legend("topright",
legend = c("月日均", "平日日均", "假日日均"),
col = c("blue", "red", "darkgreen"),
lwd = 2,
pch = 16,
bty = "n",
inset = c(-0.25, 0),
xpd = TRUE
)
}
# 車輛
bus = '301'
# 繪圖 (在 R中呈現)
weekend_and_weekday_volume_plot(bus)
# 儲存圖片
path = paste0("images/", bus, "/line_chart")
check_path(path)
png(filename = paste0(path, "/weekend_and_weekday_volume.png"), width = 8, height = 5, units = "in", res = 300, family = "kai")
weekend_and_weekday_volume_plot(bus)
dev.off()
# 平假日乘車人次 (ggplot2)
bus = '301'
weekend.days = NULL
weekday.days = NULL
month.days = NULL
weekend.volume = NULL
weekday.volume = NULL
month.volume = NULL
for (month_index in month.from:month.to){
week.days = monthly_weekday_and_weekend(year = year, month = month_index)[['Freq']]
weekday.days = c(weekday.days, week.days[1])
weekend.days = c(weekend.days, week.days[2])
month.days = c(month.days, sum(week.days))
week.volume = df_summary[[sprintf("%04d%02d", year, month_index)]][[bus]][['Weekday']]
weekday.volume = c(weekday.volume, sum(week.volume$n[week.volume$Weekday %in% c("星期一", "星期二", "星期三", "星期四", "星期五")]))
weekend.volume = c(weekend.volume, sum(week.volume$n[week.volume$Weekday %in% c("星期六", "星期日")]))
month.volume = c(month.volume, sum(week.volume$n))
}
weekday.volume.per_day = weekday.volume / weekday.days
weekend.volume.per_day = weekend.volume / weekend.days
month.volume.per_day = month.volume / month.days
plot_df <- data.frame(
月份 = month.from:month.to,
月日均 = month.volume.per_day,
平日 = weekday.volume.per_day,
假日 = weekend.volume.per_day
) %>% pivot_longer(cols = -月份, names_to = "類別", values_to = "人次")
p <- ggplot(plot_df, aes(x = 月份, y = 人次, color = 類別)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
scale_color_manual(values = c("月日均" = "blue", "平日" = "red", "假日" = "darkgreen")) +
labs(
x = "月份",
y = "日均人次",
title = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線日均乘車人次折線圖'),
color = NULL
) +
scale_x_continuous(
breaks = plot_df$月份
) +
scale_y_continuous(
breaks = pretty(c(min(plot_df$人次), max(plot_df$人次))),
limits = c(min(plot_df$人次), max(plot_df$人次)),
expand = expansion(mult = c(0.05, 0.05))
) +
theme_minimal(base_family = "kai") +
theme(
text = element_text(size = 14),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "right"
)
print(p)
# 儲存
#ggsave("ridership_plot.jpg", plot = p, width = 8, height = 5, dpi = 300)
# 運量
volume_plot <- function(bus) {
transport_volume = NULL
for (month_index in months){
transport_volume = c(transport_volume, nrow(df[[month_index]][[bus]]))
}
par(family = "kai", mar = c(5, 4, 4, 7))  # 字體與圖寬
plot(x = month.from:month.to,
y = transport_volume,
type = "o",
lwd = 2,
pch = 16,
col = "blue",
xlab = "月份",
ylab = "乘車人次",
main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線乘車人次折線圖'),
ylim = c(min(transport_volume) * 0.9, max(transport_volume) * 1.1)
)
text(x = month.from:month.to,
y = transport_volume + max(transport_volume) * 0.02,
labels = transport_volume,
pos = 3,            # 文字顯示在點上方
cex = 0.8,          # 文字大小
col = "black"
)
grid()  # 網格線
# 圖例
legend("topright",
legend = paste0(bus, '路線'),
col = "blue",
lwd = 2,
pch = 16,
bty = "n",
inset = c(-0.25, 0),
xpd = TRUE
)
}
# 車輛
#bus = '301'
for (bus in buses){
# 繪圖 (在 R中呈現)
volume_plot(bus)
# 儲存圖片
path = paste0("images/", bus, "/line_chart")
check_path(path)
png(filename = paste0(path, "/volume.png"), width = 8, height = 5, units = "in", res = 300, family = "kai")
volume_plot(bus)
dev.off()
}
# function
# load .xml file function
xml_loader <- function(path){
xml_data <- read_xml(path)
return(xml_data)
}
# transform to data frame by RouteName
get_xml_text <- function(node, path) {
result <- xml_find_first(node, path)
if (length(result) == 0 || is.na(result)) return(NA_character_)
xml_text(result, trim = TRUE)
}
xml_to_dataframe <- function(xml_data){
tickets <- xml_find_all(xml_data, ".//BusICTicket")
tickets_str <- vapply(tickets, as.character, character(1))
ticket_data <- rbindlist(lapply(tickets_str, function(ticket_str) {
ticket <- read_xml(ticket_str)
list(
ID = get_xml_text(ticket, "ID"),
IDType = get_xml_text(ticket, "IDType"),
HolderType = get_xml_text(ticket, "HolderType"),
TicketType = get_xml_text(ticket, "TicketType"),
SubTicketType = get_xml_text(ticket, "SubTicketType"),
PlateNumber = get_xml_text(ticket, "PlateNumber"),
RouteUID = get_xml_text(ticket, "RouteUID"),
RouteName = get_xml_text(ticket, "RouteName"),
SubRouteUID = get_xml_text(ticket, "SubRouteUID"),
SubRouteName = get_xml_text(ticket, "SubRouteName"),
Direction = get_xml_text(ticket, "Direction"),
FarePricingType = get_xml_text(ticket, "FarePricingType"),
StopOrStation = get_xml_text(ticket, "StopOrStation"),
BoardingStopUID = get_xml_text(ticket, ".//BoardingStopUID"),
BoardingStopName = get_xml_text(ticket, ".//BoardingStopName"),
BoardingStopSequence = get_xml_text(ticket, ".//BoardingStopSequence"),
BoardingTime = get_xml_text(ticket, ".//BoardingTime"),
DeboardingStopUID = get_xml_text(ticket, ".//DeboardingStopUID"),
DeboardingStopName = get_xml_text(ticket, ".//DeboardingStopName"),
DeboardingStopSequence = get_xml_text(ticket, ".//DeboardingStopSequence"),
DeboardingTime = get_xml_text(ticket, ".//DeboardingTime"),
Price = get_xml_text(ticket, "Price"),
Discount = get_xml_text(ticket, "Discount"),
TransferCode = get_xml_text(ticket, "TransferCode"),
DiscountInfo = get_xml_text(ticket, "DiscountInfo"),
PaymentPrice = get_xml_text(ticket, "PaymentPrice")
)
}), fill = TRUE)
return(ticket_data)
}
# loader
loader <- function(path){
xml_data = data.frame()
for (i in 1:length(path[[1]])){
xml_raw_data = xml_loader(path=path[[1]][i])
xml_data <- rbind(xml_data, xml_to_dataframe(xml_raw_data))
}
data <- xml_data %>%
group_by(RouteName) %>%
group_split() %>%
as.list()
names(data) <- sapply(data, function(df) unique(df$RouteName))  # list name
return(data)
}
# simple summary for every variables
data_summary <- function(df){
df_summary = list()
pb <- txtProgressBar(min = 0, max = length(months), style = 3)
for (month_index in 1:length(months)){
df_summary[[months[month_index]]] <- lapply(df[[month_index]], function(data) {
lapply(names(data), function(col) {
data %>% count(.data[[col]])
}) |> setNames(names(data))
})
names(df_summary[[months[month_index]]]) <- names(df[[month_index]])
setTxtProgressBar(pb, month_index)
}
close(pb)
return(df_summary)
}
# check the amounts of weekends and weekdays
monthly_weekday_and_weekend <- function(year, month){
# build all dates
dates <- seq(ymd(sprintf("%d-%02d-01", year, month)),
ceiling_date(ymd(sprintf("%d-%02d-01", year, month)), "month") - days(1),
by = "day"
)
# is it weekend?
is_weekend <- wday(dates) %in% c(1, 7)  # 1: Sunday, 7: Saturday
# output
result <- table(ifelse(is_weekend, "weekend", "weekday")) %>% data.frame()
return(result)
}
check_path <- function(path) {
if (!dir.exists(path)) {
dir.create(path, recursive = TRUE, showWarnings = FALSE)
}
}
# config
year = 2024  # 西元
month.from = 7
month.to = 12
windowsFonts(kai = windowsFont("DFKai-SB"))
# 檔案路徑
base_path <- "../../大數據組需要分析的資料/107-11403-花蓮-太魯閣客運_市區客運/114年-11303-11403"
months <- sprintf("%04d%02d", year, month.from:month.to)
paths <- unlist(lapply(months, function(ym) {
folder <- sprintf("%s_ic_HUA_0412_01", ym)
files <- sprintf("%s_ic_HUA_0412_0%d.xml", ym, 1:3)
file.path(base_path, folder, files)
}))
start_time = Sys.time()
# 將票證資料轉為資料框，以列表呈現
counter = 1
pb <- txtProgressBar(min = 0, max = length(paths), style = 3)
df = list()
for (month_index in seq(1, length(paths), by = 3)){
path = paths[month_index:min(month_index + 2, length(paths))]
df[[months[counter]]] = loader(path)
setTxtProgressBar(pb, counter)
counter = counter + 1
}
close(pb)
end_time = Sys.time()
print(paste0('Cost time: ', end_time - start_time, ' seconds'))
buses = names(df[[1]])
# 檢視前幾筆資料
head(df[[1]][[1]])
str(df[[1]])
# config
year = 2024  # 西元
month.from = 7
month.to = 12
windowsFonts(kai = windowsFont("DFKai-SB"))
# 檔案路徑
base_path <- "../../大數據組需要分析的資料/107-11403-花蓮-太魯閣客運_市區客運/114年-11303-11403"
months <- sprintf("%04d%02d", year, month.from:month.to)
paths <- unlist(lapply(months, function(ym) {
folder <- sprintf("%s_ic_HUA_0412_01", ym)
files <- sprintf("%s_ic_HUA_0412_0%d.xml", ym, 1:3)
file.path(base_path, folder, files)
}))
start_time = Sys.time()
# 將票證資料轉為資料框，以列表呈現
counter = 1
pb <- txtProgressBar(min = 0, max = length(paths), style = 3)
df = list()
for (month_index in seq(1, length(paths), by = 3)){
path = paths[month_index:min(month_index + 2, length(paths))]
df[[months[counter]]] = loader(path)
setTxtProgressBar(pb, counter)
counter = counter + 1
}
close(pb)
end_time = Sys.time()
print(paste0('Cost time: ', end_time - start_time, ' seconds'))
buses = names(df[[1]])
# 檢視前幾筆資料
head(df[[1]][[1]])
str(df[[1]])
# 運量
volume_plot <- function(bus) {
transport_volume = NULL
for (month_index in months){
transport_volume = c(transport_volume, nrow(df[[month_index]][[bus]]))
}
par(family = "kai", mar = c(5, 4, 4, 7))  # 字體與圖寬
plot(x = month.from:month.to,
y = transport_volume,
type = "o",
lwd = 2,
pch = 16,
col = "blue",
xlab = "月份",
ylab = "乘車人次",
main = paste0(year - 1911, '年', month.from, '月至', month.to, '月', bus, '路線乘車人次折線圖'),
ylim = c(min(transport_volume) * 0.9, max(transport_volume) * 1.1)
)
text(x = month.from:month.to,
y = transport_volume + max(transport_volume) * 0.02,
labels = transport_volume,
pos = 3,            # 文字顯示在點上方
cex = 0.8,          # 文字大小
col = "black"
)
grid()  # 網格線
# 圖例
legend("topright",
legend = paste0(bus, '路線'),
col = "blue",
lwd = 2,
pch = 16,
bty = "n",
inset = c(-0.25, 0),
xpd = TRUE
)
}
# 車輛
#bus = '301'
for (bus in buses){
# 繪圖 (在 R中呈現)
volume_plot(bus)
# 儲存圖片
path = paste0("images/", bus, "/line_chart")
check_path(path)
png(filename = paste0(path, "/volume.png"), width = 8, height = 5, units = "in", res = 300, family = "kai")
volume_plot(bus)
dev.off()
}
# 車輛
#bus = '301'
for (bus in buses){
# 繪圖 (在 R中呈現)
volume_plot(bus)
# 儲存圖片
path = paste0("images/", bus, "/line_chart")
check_path(path)
png(filename = paste0(path, "/volume.png"), width = 8, height = 5, units = "in", res = 300, family = "kai")
volume_plot(bus)
dev.off()
}
load("C:/Users/user/Desktop/gitClone/logistics-management/花蓮市區公車/11203-11403 bus/.RData")
load("C:/Users/user/Desktop/gitClone/logistics-management/花蓮市區公車/11203-11403 bus/.RData")
